
- git --version                                 => get the actual version of git 
- git config --global user.name 'name'          => add my name to work with
- git config --global user.email 'email'        => add my email to work with
- git config --global init.defaultBranch main   => set the branch main as default
- git init                                      => initialize a new repository
- git status                                    => show all files untracked
- git add file.extention                        => track a file
- git add .                                     => track all files on your projects
- git commit -m 'message'                       => create a copy of my project as an internal backup 
- git checkout [hash or branch]                 => ask to git to shift on the specific commit or branch

NB : a local repo is a version of your project stored in the your local machine while a remote repos is a
version of your project stored in a server like github, gitlab or bitbucket

when we clone a repository on github, git automaticaly names our repository as origin by default is
an alias for our remote repository url (origin = https://github.com/nkds/portfolio)

if we want to have multiple remote repository, we can run `git remote add other_origin_name link_to_the_origin` after run `git remote add origin link_to_the_other_origin` 


- git branch branch_name                              => create a branch name without directly swich on this
- git checkout -b branch_name                         => create a branch name and switch directly on this
- git branch new-branch_name source-branch            => create a branch name and switch directly on this from another branch
- git push --set-upstream origin branch_name          => push a specific branch
- git push -u origin branch_name                      => push a specific branch
- git push                                            => push the current branch
- git pull                                            => update a branch if somebody else has modify our remote repository


A pull request let's you share your changes with your team for review of feedback, if we wont to pull the project in a pc which is 
not the main pc (principal remote origin) we should run all of these commands : 

- git remote add upstream https://github.com/ORIGINAL_USER/NOM_PROJET.git
- git fetch upstream          # Récupère les nouvelles mises à jour du projet principal
- git checkout main           # Se place sur la branche principale de ton fork
- git merge upstream/main     # Fusionne les nouvelles mises à jour du projet principal
- git push origin main        # Met à jour ton dépôt GitHub avec les dernières modifications

if we want to reset our github informations in our pc, we can run the commands

- git credential reject https://github.com
- cmdkey /delete:git:https://github.com

now we are going to talk about merge conflicts.

Is a problem that we have when many developpers modify a same file at the same time 
and make a pull request
To resolve a merge conflict, we should follow these steps : 
- pull the repo by runnig                                                       => git pull
- go on the branch witch has a conflick (which is doesn't merged) by running    => git checkout [branch_with_conflics]
- and merge to main                                                             => git merge main
- finally, go on the mergin system on our code editor and resolve the merge conflic